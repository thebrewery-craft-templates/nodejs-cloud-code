/*
 *** NOTE: PLEASE DO NOT EDIT THIS FILE ***
 *
 */
require("dotenv").config();

import { join } from "path";
import express from "express";
import cors from "cors";
import { default as ParseServer } from "parse-server";
import ParseDashboard from "parse-dashboard";

const options = require("./parse-config");
const databaseUri = process.env.DATABASE_URI || process.env.MONGODB_URI;

if (!databaseUri) {
  console.log("DATABASE_URI not specified, falling back to localhost.");
}

const mountPath = process.env.PARSE_MOUNT || "/parse";
const port = process.env.PORT || 1337;
const api = new ParseServer(options);
const app = express();
app.enable("trust proxy");
app.use(express.json());

/* New Relic setup */
const newrelicParseServerName = process.env.NEWRELIC_PARSE_SERVER_NAME;
const newrelicLicenseKey = process.env.NEWRELIC_LICENSE_KEY;
if (newrelicLicenseKey && newrelicParseServerName) {
  // Tag the user request for analytics purposes
  const newrelic = require("newrelic");
  const instrumentedPath = new RegExp("^" + mountPath + "((?!/users/me).)*$");
  app.use(instrumentedPath, (req, res, next) => {
    const sessionToken =
      req.headers["x-parse-session-token"] || req.body["_SessionToken"];
    if (sessionToken) {
      const parseServerUrl = req.protocol + "://" + req.get("host") + mountPath;
      Parse.initialize(options.appId, options.javascriptKey, options.masterKey);
      Parse.serverURL = parseServerUrl;
      Parse.User.enableUnsafeCurrentUser();
      Parse.User.become(sessionToken, { useMasterKey: true }).then(
        (user) => {
          newrelic.addCustomAttribute("user_id", user.id);
          next();
        },
        (error) => {
          console.log(error);
          next();
        }
      );
    } else {
      next();
    }
  });
}

app.use(cors());

if (process.env.IS_DEVELOPMENT) {
  const users = [
    {
      user: "admin",
      pass: "$2y$12$zkMYmegpI00X2NmNBKHiEuujT6xl7AKWpO/Lx.3d2Gq2K2RBeulzi",
    },
  ];

  app.use(
    "/dashboard",
    new ParseDashboard(
      {
        apps: [
          {
            serverURL: "/parse",
            appId: options.appId,
            masterKey: options.masterKey,
            appName: "my-dev-parse-server",
          },
        ],
        users,
        useEncryptedPasswords: true,
      },
      process.env.IS_DEVELOPMENT
    )
  );
}

// Serve static assets from the /public folder
app.use(express.static(join(__dirname, "/public")));

// Mount your cloud express app
app.use("/", require("./cloud/main.js").express);

// Serve the Parse API on the /parse URL prefix
app.use(mountPath, api.app);

const httpServer = require("http").createServer(app);
httpServer.listen(port, () => {
  console.log(`Running on http://localhost:${port}`);
});

// This will enable the Live Query real-time server
ParseServer.createLiveQueryServer(httpServer);
